# -*- coding: utf-8 -*-
"""BlackSwanTechnologies Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AC2Pb9SpEVWVZNymfkgaxvbztBInfjeR
"""

import spacy

def get_entity_list_from_text(input_text, language_code): 
  """Returns list of entities extracted using input_text and language code
   using Spacy library

    
    input_text (str): string with text
    language_code (str): langauge code 
    RETURNS (list[dict]): list of entities, each entity is dictionary containing keys
      text, type, start_pos, end_pos.
      
    """

  if not isinstance(input_text, str): 
    raise ValueError(f"input_text is of not string type") 

  if not isinstance(language_code, str): 
    raise ValueError(f"language_code is of not string type") 


  language_to_spacy_models = {
      "ca": "ca_core_news_sm", 
      "zh": "zh_core_web_sm", 
      "da": "da_core_news_sm", 
      "nl": "nl_core_news_sm",
      "en": "en_core_web_sm", 
      "fi": "fi_core_news_sm", 
      'de': 'de_core_news_sm',
      'el': 'el_core_news_sm',
      'es': 'es_core_news_sm',
      'fr': 'fr_core_news_sm',
      'it': 'it_core_news_sm',
      'ja': 'ja_core_news_sm',
      'ko': 'ko_core_news_sm',
      'lt': 'lt_core_news_sm',
      'mk': 'mk_core_news_sm',
      'nb': 'nb_core_news_sm',
      'pl': 'pl_core_news_sm',
      'pt': 'pt_core_news_sm',
      'ro': 'ro_core_news_sm',
      'ru': 'ru_core_news_sm',
      'sv': 'sv_core_news_sm',
      'xx': 'xx_ent_wiki_sm'
  }

  
  model_name = language_to_spacy_models.get(language_code, False)

  if model_name:
    if not spacy.util.is_package(model_name): 
      raise ValueError(f"Please download the model {model_name} by running the following command\npython -m spacy download {model_name}") 
    nlp = spacy.load(language_to_spacy_models[language_code])

  else: 
    raise ValueError(f"The current language code: {language_code} is not supported by spaCy") 


  doc = nlp(input_text)

  entity_list = [
    {
      "text": ent.text,
      "type": ent.label_,
      "start_pos": ent.start_char,
      "end_pos": ent.end_char
    } 
    for ent in doc.ents]

  return entity_list

"""### Test Case 1: 
valid input_text and langauge code
"""

get_entity_list_from_text("Apple is looking at buying U.K. startup for $1 billion", "en")

"""### Test Case 2: 
invalid input_text data type
"""

get_entity_list_from_text(1, "en")

"""### Test Case 3: 
invalid langauge code data type
"""

get_entity_list_from_text(, 2)

"""### Test Case 4
Invalid Language code
"""

get_entity_list_from_text("Apple is looking at buying U.K. startup for $1 billion", "wrong_code")



# get_entity_list_from_text("Questa Ã¨ una frase.", "it")

